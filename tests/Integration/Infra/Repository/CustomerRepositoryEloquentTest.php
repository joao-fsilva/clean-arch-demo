<?php

namespace Tests\Integration\Infra\Repository;

use App\Models\Customer as CustomerModel;
use App\Repository\CustomerRepositoryEloquent;
use Demo\Domain\_Common\Exception\EntityNotFoundException;
use Demo\Domain\Entity\Customer;
use Laravel\Lumen\Testing\DatabaseTransactions;
use Tests\TestCase;

class CustomerRepositoryEloquentTest extends TestCase
{
    use DatabaseTransactions;

    private CustomerRepositoryEloquent $customerRepositoryEloquent;
    private Customer $customer;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->customerRepositoryEloquent = new CustomerRepositoryEloquent(new CustomerModel());
        $this->customer = new Customer(name: 'João Silva');
    }

    public function testShouldCreate(): void
    {
        $this->customerRepositoryEloquent->create(customer: $this->customer);

        $this->seeInDatabase('customers', ['name' => 'João Silva']);
    }

    public function testShouldThrowEntityNotFoundExceptionWhenNotFound(): void
    {
        $this->expectException(EntityNotFoundException::class);

        $this->customerRepositoryEloquent->findById(id: -99);
    }

    public function testShouldFindBy(): void
    {
        $customerModel = CustomerModel::factory()->create();

        $customer = $this->customerRepositoryEloquent->findById(id: $customerModel->id);

        $this->assertSame($customerModel->name, $customer->name());
    }

    public function testShouldUpdate(): void
    {
        $customerModel = CustomerModel::factory()->create();

        $customer = $this->customerRepositoryEloquent->findById(id: $customerModel->id);
        $customer->changeName('Test');

        $this->customerRepositoryEloquent->update($customer);

        $customer = $this->customerRepositoryEloquent->findById(id: $customerModel->id);

        $this->assertSame('Test', $customer->name());
    }

    public function testShouldDelete(): void
    {
        $customerModel = CustomerModel::factory()->create();

        $this->customerRepositoryEloquent->delete(id: $customerModel->id);

        $this->notSeeInDatabase('customers', ['id' => $customerModel->id]);
    }

    public function testShouldFindAll(): void
    {
        $customerModel = CustomerModel::factory()->create();

        $customers = $this->customerRepositoryEloquent->findAll(limit: 1, offset: 0);
        $customer = $customers[0];

        $this->assertCount(1, $customers);
        $this->assertCount(4, array_keys($customer));
        $this->assertSame($customerModel->id, $customer['id']);
        $this->assertSame($customerModel->name, $customer['name']);
        $this->assertNotEmpty($customer['created_at']);
        $this->assertNotEmpty($customer['updated_at']);
    }
}
